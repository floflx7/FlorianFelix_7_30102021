{"version":3,"file":"memory-store.js","sourceRoot":"","sources":["../../source/memory-store.ts"],"names":[],"mappings":"AAAA,0BAA0B;AAC1B,gCAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIhC;;;;;;;;GAQG;AACH,IAAM,sBAAsB,GAAG,UAAC,QAAgB;IAC/C,IAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAA;IAC5B,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,EAAE,GAAG,QAAQ,CAAC,CAAA;IACjE,OAAO,SAAS,CAAA;AACjB,CAAC,CAAA;AAED;;;;;GAKG;AACH;IAAA;IA+FA,CAAC;IA7EA;;;;OAIG;IACH,0BAAI,GAAJ,UAAK,OAAgB;QAArB,iBAiBC;QAhBA,gDAAgD;QAChD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QAChC,2CAA2C;QAC3C,IAAI,CAAC,SAAS,GAAG,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAEtD,iCAAiC;QACjC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QAEd,qEAAqE;QACrE,+BAA+B;QAC/B,IAAM,QAAQ,GAAG,WAAW,CAAC;;;4BAC5B,qBAAM,IAAI,CAAC,QAAQ,EAAE,EAAA;;wBAArB,SAAqB,CAAA;;;;aACrB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QACjB,IAAI,QAAQ,CAAC,KAAK,EAAE;YACnB,QAAQ,CAAC,KAAK,EAAE,CAAA;SAChB;IACF,CAAC;IAED;;;;;;;;OAQG;IACG,+BAAS,GAAf,UAAgB,GAAW;;;;;gBACpB,SAAS,GAAG,CAAC,MAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAI,CAAC,CAAC,GAAG,CAAC,CAAA;gBAC3C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAA;gBAE1B,sBAAO;wBACN,SAAS,WAAA;wBACT,SAAS,EAAE,IAAI,CAAC,SAAS;qBACzB,EAAA;;;KACD;IAED;;;;;;OAMG;IACG,+BAAS,GAAf,UAAgB,GAAW;;;;gBACpB,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBAC9B,IAAI,OAAO,EAAE;oBACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,CAAA;iBAC5B;;;;KACD;IAED;;;;;;OAMG;IACG,8BAAQ,GAAd,UAAe,GAAW;;;gBACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;;;;KACrB;IAED;;;;OAIG;IACG,8BAAQ,GAAd;;;gBACC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;gBACd,IAAI,CAAC,SAAS,GAAG,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;;;;KACtD;IACF,kBAAC;AAAD,CAAC,AA/FD,IA+FC","sourcesContent":["// /source/memory-store.ts\n// A memory store for hit counts\n\nimport { Store, Options, IncrementResponse } from './types.js'\n\n/**\n * Calculates the time when all hit counters will be reset.\n *\n * @param windowMs {number} - The duration of a window (in milliseconds)\n *\n * @returns {Date}\n *\n * @private\n */\nconst calculateNextResetTime = (windowMs: number): Date => {\n\tconst resetTime = new Date()\n\tresetTime.setMilliseconds(resetTime.getMilliseconds() + windowMs)\n\treturn resetTime\n}\n\n/**\n * A {@link Store} that stores the hit count for each client in\n * memory.\n *\n * @public\n */\nexport default class MemoryStore implements Store {\n\t/**\n\t * The duration of time before which all hit counts are reset (in milliseconds).\n\t */\n\twindowMs!: number\n\n\t/**\n\t * The map that stores the number of hits for each client in memory.\n\t */\n\thits!: {\n\t\t[key: string]: number | undefined\n\t}\n\n\t/**\n\t * The time at which all hit counts will be reset.\n\t */\n\tresetTime!: Date\n\n\t/**\n\t * Method that initializes the store.\n\t *\n\t * @param options {Options} - The options used to setup the middleware\n\t */\n\tinit(options: Options): void {\n\t\t// Get the duration of a window from the options\n\t\tthis.windowMs = options.windowMs\n\t\t// Then calculate the reset time using that\n\t\tthis.resetTime = calculateNextResetTime(this.windowMs)\n\n\t\t// Initialise the hit counter map\n\t\tthis.hits = {}\n\n\t\t// Reset hit counts for ALL clients every `windowMs` - this will also\n\t\t// re-calculate the `resetTime`\n\t\tconst interval = setInterval(async () => {\n\t\t\tawait this.resetAll()\n\t\t}, this.windowMs)\n\t\tif (interval.unref) {\n\t\t\tinterval.unref()\n\t\t}\n\t}\n\n\t/**\n\t * Method to increment a client's hit counter.\n\t *\n\t * @param key {string} - The identifier for a client\n\t *\n\t * @returns {IncrementResponse} - The number of hits and reset time for that client\n\t *\n\t * @public\n\t */\n\tasync increment(key: string): Promise<IncrementResponse> {\n\t\tconst totalHits = (this.hits[key] ?? 0) + 1\n\t\tthis.hits[key] = totalHits\n\n\t\treturn {\n\t\t\ttotalHits,\n\t\t\tresetTime: this.resetTime,\n\t\t}\n\t}\n\n\t/**\n\t * Method to decrement a client's hit counter.\n\t *\n\t * @param key {string} - The identifier for a client\n\t *\n\t * @public\n\t */\n\tasync decrement(key: string): Promise<void> {\n\t\tconst current = this.hits[key]\n\t\tif (current) {\n\t\t\tthis.hits[key] = current - 1\n\t\t}\n\t}\n\n\t/**\n\t * Method to reset a client's hit counter.\n\t *\n\t * @param key {string} - The identifier for a client\n\t *\n\t * @public\n\t */\n\tasync resetKey(key: string): Promise<void> {\n\t\tdelete this.hits[key]\n\t}\n\n\t/**\n\t * Method to reset everyone's hit counter.\n\t *\n\t * @public\n\t */\n\tasync resetAll(): Promise<void> {\n\t\tthis.hits = {}\n\t\tthis.resetTime = calculateNextResetTime(this.windowMs)\n\t}\n}\n"]}