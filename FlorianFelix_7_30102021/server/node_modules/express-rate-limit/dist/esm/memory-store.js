// /source/memory-store.ts
// A memory store for hit counts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * Calculates the time when all hit counters will be reset.
 *
 * @param windowMs {number} - The duration of a window (in milliseconds)
 *
 * @returns {Date}
 *
 * @private
 */
var calculateNextResetTime = function (windowMs) {
    var resetTime = new Date();
    resetTime.setMilliseconds(resetTime.getMilliseconds() + windowMs);
    return resetTime;
};
/**
 * A {@link Store} that stores the hit count for each client in
 * memory.
 *
 * @public
 */
var MemoryStore = /** @class */ (function () {
    function MemoryStore() {
    }
    /**
     * Method that initializes the store.
     *
     * @param options {Options} - The options used to setup the middleware
     */
    MemoryStore.prototype.init = function (options) {
        var _this = this;
        // Get the duration of a window from the options
        this.windowMs = options.windowMs;
        // Then calculate the reset time using that
        this.resetTime = calculateNextResetTime(this.windowMs);
        // Initialise the hit counter map
        this.hits = {};
        // Reset hit counts for ALL clients every `windowMs` - this will also
        // re-calculate the `resetTime`
        var interval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resetAll()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }, this.windowMs);
        if (interval.unref) {
            interval.unref();
        }
    };
    /**
     * Method to increment a client's hit counter.
     *
     * @param key {string} - The identifier for a client
     *
     * @returns {IncrementResponse} - The number of hits and reset time for that client
     *
     * @public
     */
    MemoryStore.prototype.increment = function (key) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var totalHits;
            return __generator(this, function (_b) {
                totalHits = ((_a = this.hits[key]) !== null && _a !== void 0 ? _a : 0) + 1;
                this.hits[key] = totalHits;
                return [2 /*return*/, {
                        totalHits: totalHits,
                        resetTime: this.resetTime
                    }];
            });
        });
    };
    /**
     * Method to decrement a client's hit counter.
     *
     * @param key {string} - The identifier for a client
     *
     * @public
     */
    MemoryStore.prototype.decrement = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var current;
            return __generator(this, function (_a) {
                current = this.hits[key];
                if (current) {
                    this.hits[key] = current - 1;
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Method to reset a client's hit counter.
     *
     * @param key {string} - The identifier for a client
     *
     * @public
     */
    MemoryStore.prototype.resetKey = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                delete this.hits[key];
                return [2 /*return*/];
            });
        });
    };
    /**
     * Method to reset everyone's hit counter.
     *
     * @public
     */
    MemoryStore.prototype.resetAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.hits = {};
                this.resetTime = calculateNextResetTime(this.windowMs);
                return [2 /*return*/];
            });
        });
    };
    return MemoryStore;
}());
export default MemoryStore;
//# sourceMappingURL=memory-store.js.map